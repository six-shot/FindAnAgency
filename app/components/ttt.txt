"use client";
import React, { ChangeEventHandler, FormEventHandler, useState } from "react";
import Select from "react-select";

import { IoMdClose } from "react-icons/io";
import { Dialog, Transition } from "@headlessui/react";
import { Fragment } from "react";
import { Button } from "./buttons/Button";

export default function MyModal() {
  let [isOpen, setIsOpen] = useState(false);

  function closeModal() {
    setIsOpen(false);
  }

  function openModal() {
    setIsOpen(true);
  }
  const [userInfo, setUserInfo] = useState({
    name: "",
    address: "",
services[],
    servicesList: [
      { value: "service1", label: "Digital Marketing Agencies" },
      { value: "service2", label: "Content Marketing" },
      { value: "service3", label: "Design" },
      { value: "service3", label: "Digital Marketing" },
      { value: "service3", label: "Email Marketing" },
      { value: "service3", label: "Mobile Development" },
      { value: "service3", label: "Mobile Marketing" },
      { value: "service3", label: "Online Reputation management" },
      { value: "service3", label: "Pay per Click Marketing" },
      { value: "service3", label: "Search Engine Optimization" },
      { value: "service3", label: "Social Media Marketing" },
      { value: "service3", label: "Website Development" },
      { value: "service3", label: "Traditional Services" },
      { value: "service3", label: "Boutique" },
      { value: "service3", label: "Experiential" },
      { value: "service3", label: "Media" },
      { value: "service3", label: "Public Relations(PR)" },
    ],
    about: "",
    phone_number: "",
    website: "",
    location: "",
    featured: "",
    logo: null as File | null,
  });
  const [busy, setBusy] = useState(false);

  const {
    name,
    address,
    services,
    about,
    website,
    phone_number,
    location,
    featured,
    logo,
  } = userInfo;

  const handleFileChange: ChangeEventHandler<HTMLInputElement> = (e) => {
    const file = e.target.files?.[0];

    if (file) {
      setUserInfo({ ...userInfo, logo: file });
    }
  };

  const handleSubmit: FormEventHandler<HTMLFormElement> = async (e) => {
    setBusy(true);
    e.preventDefault();

    const formData = new FormData();
    formData.append("name", name);
    formData.append("address", address);
    formData.append("about", about);
    formData.append("website", website);
    formData.append("phone_number", phone_number);
    formData.append("location", location);
    formData.append("featured", featured);
    if (logo !== null) {
      formData.append("logo", logo);
    }
 formData.append(
   "services",
   userInfo.services.map((service) => service.value).join(",")
 )
    try {
      const res = await fetch("https://gind-agencies.onrender.com/api/create", {
        method: "POST",
        body: formData,
      });
      if (res.ok) {
        setUserInfo({
          name: "",
          address: "",
          services: [],
          about: "",
          phone_number: "",
          website: "",
          location: "",
          featured: "",

          logo: null,
        });

        console.log("Listing created successfully!");
      } else {
        console.error("Failed to create listing.");
      }
    } catch (error) {
      console.error("Error creating listing:", error);
    } finally {
      setBusy(false);
    }
  };

  return (
    <>
      <div className="">
        <Button onClick={openModal} variant="primary">
          Create a Listing
        </Button>
      </div>

      <Transition appear show={isOpen} as={Fragment}>
        <Dialog as="div" className="relative z-10" onClose={closeModal}>
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-black/25" />
          </Transition.Child>

          <div className="fixed inset-0 overflow-y-auto">
            <div className="flex min-h-full items-center justify-center p-4 text-center">
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0 scale-95"
                enterTo="opacity-100 scale-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100 scale-100"
                leaveTo="opacity-0 scale-95"
              >
                <Dialog.Panel className="w-full z-[999] max-w-xl transform overflow-hidden rounded-2xl bg-white p-6  text-left align-middle shadow-xl transition-all">
                  <form onSubmit={handleSubmit} className="">
                    <div className="flex justify-end items-end">
                      <IoMdClose
                        className="text-[25px] cursor-pointer"
                        onClick={closeModal}
                      />
                    </div>
                    <h2 className="text-2xl my-2">Create LIsting</h2>
                    <div className="sm:mb-6 mb-4">
                      <label className="mb-2 text-base">
                        Name<sup>*</sup>
                      </label>
                      <input
                        className="sm:h-[48px] h-[42px] pl-2 outline-none w-[100%]  border-[1px] border-[#000000] rounded-lg"
                        type="text"
                        value={name}
                        onChange={({ target }) =>
                          setUserInfo({ ...userInfo, name: target.value })
                        }
                      />
                    </div>
                    <div className="sm:mb-6 mb-4">
                      <label className="mb-2 text-base">
                        Address<sup>*</sup>
                      </label>
                      <input
                        className="sm:h-[48px] h-[42px] pl-2 outline-none w-[100%]  border-[1px] border-[#000000] rounded-lg"
                        type="text"
                        value={address}
                        onChange={({ target }) =>
                          setUserInfo({ ...userInfo, address: target.value })
                        }
                      />
                    </div>
                    <div className="sm:mb-6 mb-4">
                      <label className="mb-2 text-base">
                        Services<sup>*</sup>
                      </label>
                      <Select
                        isMulti
                        options={userInfo.servicesList}
                        value={userInfo.services}
                        onChange={(selectedOptions) =>
                          setUserInfo({
                            ...userInfo,
                            services: selectedOptions,
                          })
                        }
                      />
                    </div>
                    <div className="sm:mb-6 mb-4">
                      <label className="mb-2 text-base">
                        About<sup>*</sup>
                      </label>
                      <input
                        className="sm:h-[48px] h-[42px] pl-2 outline-none w-[100%]  border-[1px] border-[#000000] rounded-lg"
                        type="text"
                        value={about}
                        onChange={({ target }) =>
                          setUserInfo({ ...userInfo, about: target.value })
                        }
                      />
                    </div>
                    <div className="sm:mb-6 mb-4">
                      <label className="mb-2 text-base">
                        Website<sup>*</sup>
                      </label>
                      <input
                        className="sm:h-[48px] h-[42px] pl-2 outline-none w-[100%]  border-[1px] border-[#000000] rounded-lg"
                        type="text"
                        value={website}
                        onChange={({ target }) =>
                          setUserInfo({ ...userInfo, website: target.value })
                        }
                      />
                    </div>
                    <div className="sm:mb-6 mb-4">
                      <label className="mb-2 text-base">
                        Phone Number<sup>*</sup>
                      </label>
                      <input
                        className="sm:h-[48px] h-[42px] pl-2 outline-none w-[100%]  border-[1px] border-[#000000] rounded-lg"
                        type="text"
                        value={phone_number}
                        onChange={({ target }) =>
                          setUserInfo({
                            ...userInfo,
                            phone_number: target.value,
                          })
                        }
                      />
                    </div>
                    <div className="sm:mb-6 mb-4">
                      <label className="mb-2 text-base">
                        Location<sup>*</sup>
                      </label>
                      <input
                        className="sm:h-[48px] h-[42px] pl-2 outline-none w-[100%]  border-[1px] border-[#000000] rounded-lg"
                        type="text"
                        value={location}
                        onChange={({ target }) =>
                          setUserInfo({ ...userInfo, location: target.value })
                        }
                      />
                    </div>
                    <div className="sm:mb-6 mb-4">
                      <label className="mb-2 text-base">
                        Featured<sup>*</sup>
                      </label>
                      <input
                        className="sm:h-[48px] h-[42px] pl-2 outline-none w-[100%]  border-[1px] border-[#000000] rounded-lg"
                        type="text"
                        value={featured}
                        onChange={({ target }) =>
                          setUserInfo({ ...userInfo, featured: target.value })
                        }
                      />
                    </div>

                    <div className="sm:mb-6 mb-4 flex flex-col">
                      <label className="mb-2 text-base">Logo</label>
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleFileChange}
                        className="mt-2"
                      />
                    </div>

                    <div className="">
                      <button
                        className="w-[100%] text-lg h-[48px] bg-[#83C146] text-white rounded mb-4"
                        disabled={busy || !featured}
                        style={{ opacity: busy ? 0.5 : 1 }}
                      >
                        {busy ? "Creating Listing..." : "Create Listing"}
                      </button>
                    </div>
                  </form>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition>
    </>
  );
}


  <ul>
          <li>Digital Marketing Agencies:({digital})</li>
          <li>Content Marketing:({design})</li>
          <li>Design:({design})</li>
          <li>Digital Marketing:({design})</li>
          <li>Email Marketing:({design})</li>
          <li>Mobile Development:({design})</li>
          <li>Mobile Marketing:({design})</li>
          <li>Online Reputation Management({design})</li>
          <li>Pay per Click Marketing:({design})</li>
          <li>Search Engine Optimization:({design})</li>
          <li>Soacial Media Marketing:({design})</li>
          <li>Traditional Services:({design})</li>
          <li>Boutique:({design})</li>
          <li>Experiential:({design})</li>
          <li>Public Relations(PR):({design})</li>
        </ul>




        "use client";
import React, { useEffect, useState } from "react";
import axios from "axios";
import { IoClose, IoSearch } from "react-icons/io5";
import debounce from "lodash/debounce"; // Import the debounce function
import { useRouter } from "next/navigation";
import Image from "next/image";
import Link from "next/link";

// // ... (your existing imports)

// // ... (your existing imports)

// const Search = () => {
//   const [input, setInput] = useState("");
//   const router = useRouter();
//   const [tasks, setTasks] = useState<Task[]>([]);
//   const [isLoading, setIsLoading] = useState(false);

//   const debouncedSearch = debounce((searchTerm: string) => {
//     if (searchTerm === "") {
//       // If input is empty, do not perform the search
//       setTasks([]);
//       setIsLoading(false);
//       return;
//     }

//     setIsLoading(true);
//     axios
//       .get(`https://gind-agencies.onrender.com/api/search?`, {
//         params: {
//           search: searchTerm,
//         },
//       })
//       .then((res) => {
//         const taskResults = res?.data?.data;
//         setTasks(taskResults);
//       })
//       .finally(() => {
//         setIsLoading(false);
//       });
//   }, 300);

//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     const searchTerm = e.target.value;
//     setInput(searchTerm);

//     if (searchTerm === "") {
//       // If input is empty, hide the search results section and clear the results
//       setTasks([]);
//     } else {
//       // If input is not empty, trigger the debounced search
//       debouncedSearch(searchTerm);
//     }
//   };

//   const searchTask = (e: React.FormEvent<HTMLFormElement>) => {
//     e.preventDefault();
//     router.push(`?task=${input}`);
//   };

//   const closeResults = () => {
//     // Clear the input and search results
//     setTasks([]);
//     setInput("");
//   };

//   return (
//     <div className="relative w-full xl:flex flex-col xl:items-center">
//       <form onSubmit={(e) => searchTask(e)}>
//         <div className="z-[999] xl:w-[700px] w-full h-[60px] rounded-[50px] bg-white flex px-6 justify-between items-center">
//           <input
//             className="outline-none bg-transparent w-full h-full px-4"
//             type="text"
//             value={input}
//             onChange={(e) => handleInputChange(e)}
//           />
//           <div>
//             <div>
//               {isLoading ? (
//                 <span className="loader"></span>
//               ) : (
//                 <>
//                   {tasks.length > 0 ? (
//                     <IoClose className="text-[25px]" onClick={closeResults} />
//                   ) : (
//                     <IoSearch className="text-[25px]" />
//                   )}
//                 </>
//               )}
//             </div>
//           </div>
//         </div>
//       </form>

//       {!isLoading && input.trim() !== "" && tasks.length === 0 && (
//         <div className="xl:w-[700px] w-full py-2 mt-3 bg-white rounded">
//           <p>No search results found.</p>
//         </div>
//       )}

//       {tasks.length > 0 && input.trim() !== "" && (
//         <div className="z-[999] xl:w-[700px] w-full py-2 mt-3 bg-white rounded flex flex-col gap-3 px-6 justify-between ">
//           {tasks.map((task) => (
//             <Link href={`/agency/${task.id}`} key={task.id}>
//               <div className="flex items-center gap-2">
//                 <div className="w-[300px] h-[60px]">
//                   <Image
//                     src={task.logoURL}
//                     alt="logo"
//                     width={300}
//                     height={60}
//                   />
//                 </div>
//                 <div className="">
//                   <h5 className="text-sm text-blue-700 font-medium font-nunito">
//                     {task.name}
//                   </h5>
//                   <p className="text-sm -mt-1">{task.about}</p>
//                 </div>
//               </div>
//             </Link>
//           ))}
//         </div>
//       )}
//     </div>
//   );
// };

// export default Search;


